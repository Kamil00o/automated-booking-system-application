version: '3'
services:
  api-gateway:
    container_name: api-gateway
    image: kamil00o/ver001-api-gateway:0.0.1-SNAPSHOT
    ports:
      - "8555:8555"
    environment:
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://eureka-server-lb:8575/eureka
    depends_on:
      - eureka-server-lb
  eureka-server-lb:
    container_name: eureka-server-lb
    image: kamil00o/ver001-eureka-server-lb:0.0.1-SNAPSHOT
    ports:
      - "8575:8575"
  passenger-account-service:
    container_name: passenger-account-service
    image: kamil00o/ver001-passenger-account-service:0.0.1-SNAPSHOT
    ports:
      - "9000:9000"
    environment:
      SPRING.DATASOURCE.URL: jdbc:postgresql://host.docker.internal:5532/passenger_service_db
      SPRING.KAFKA.BOOTSTRAP-SERVERS: "INSIDE://kafka:9093"
      SPRING.KAFKA.CONSUMER.BOOTSTRAP-SERVERS: "INSIDE://kafka:9093"
      SPRING.KAFKA.PRODUCER.BOOTSTRAP-SERVERS: "INSIDE://kafka:9093"
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://eureka-server-lb:8575/eureka
    depends_on:
      - kafka
      - eureka-server-lb
  seats-booking-system-service:
    container_name: seats-booking-system-service
    image: kamil00o/ver001-seats-booking-system-service:0.0.1-SNAPSHOT
    ports:
      - "9200:9200"
    environment:
      SPRING.DATASOURCE.URL: jdbc:postgresql://host.docker.internal:5432/booking_service_db
      SPRING.KAFKA.BOOTSTRAP-SERVERS: "INSIDE://kafka:9093"
      SPRING.KAFKA.CONSUMER.BOOTSTRAP-SERVERS: "INSIDE://kafka:9093"
      SPRING.KAFKA.PRODUCER.BOOTSTRAP-SERVERS: "INSIDE://kafka:9093"
      EUREKA.CLIENT.SERVICEURL.DEFAULTZONE: http://eureka-server-lb:8575/eureka
#    networks:
#      - automated-booking-system-application-network
    depends_on:
      - kafka
      - eureka-server-lb
  postgres-booking-service:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=booking_service_db
      - POSTGRES_USER=laganowskikamil
      - POSTGRES_PASSWORD=pracamagisterska
      - PGDATA=var/lib/postgresql/data
    command: ["postgres", "-c", "log_statement=all"]
    volumes:
      - ./volumes/postgresql-1:/var/lib/postgresql/data
  postgres-passenger-service:
    image: postgres:15-alpine
    ports:
      - "5532:5432"
    environment:
      - POSTGRES_DB=passenger_service_db
      - POSTGRES_USER=laganowskikamil
      - POSTGRES_PASSWORD=pracamagisterska
      - PGDATA=var/lib/postgresql/data
    command: [ "postgres", "-c", "log_statement=all" ]
    volumes:
      - ./volumes/postgresql-2:/var/lib/postgresql/data
  postgres-passenger-service-it:
    image: postgres:15-alpine
    ports:
      - "5332:5432"
    environment:
      - POSTGRES_DB=passenger_service_test_db
      - POSTGRES_USER=laganowskikamil
      - POSTGRES_PASSWORD=pracamagisterska
      - PGDATA=var/lib/postgresql/data
    command: [ "postgres", "-c", "log_statement=all" ]
  postgres-booking-service-it:
    image: postgres:15-alpine
    ports:
      - "5232:5432"
    environment:
      - POSTGRES_DB=booking_service_test_db
      - POSTGRES_USER=laganowskikamil
      - POSTGRES_PASSWORD=pracamagisterska
      - PGDATA=var/lib/postgresql/data
    command: [ "postgres", "-c", "log_statement=all" ]
  pgadmin:
    image: dpage/pgadmin4
    ports:
      - 8000:80
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@amigoscode.com
      - PGADMIN_DEFAULT_PASSWORD=pracamagisterska
  zookeeper:
    container_name: zookeeper
    image: "docker.io/bitnami/zookeeper:3"
#    networks:
#      - automated-booking-system-application-network
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    container_name: kafka
    image: "docker.io/bitnami/kafka:2-debian-10"
#    networks:
#      - automated-booking-system-application-network
    ports:
      - "9092:9092"
    expose:
      - "9093"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ADVERTISED_LISTENERS=INSIDE://kafka:9093,OUTSIDE://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      - KAFKA_LISTENERS=INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_HOST_NAME=kafka:9092
    depends_on:
      - zookeeper

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui
#    networks:
#      - automated-booking-system-application-network
    ports:
      - "9090:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=localhost:2181

networks:
  automated-booking-system-application-network:
    driver: bridge

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  postgres_data:
    driver: local